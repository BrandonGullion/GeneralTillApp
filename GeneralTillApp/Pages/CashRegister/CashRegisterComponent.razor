@page "/cashregister"

@inject ApplicationDbContext _context
@inject NavigationManager _navManager
<!--Add a horizontal toolbar to allow for refunds, etc.-->
<div class="PagePadding">

    <h3>Cash Register</h3>

    <!-- Cash register toolbar options TODO :: Break into own component -->
    <div class="cashregister-toolbar">
        <button @onclick="() => CustomerDialogVisibility = true"><i class="far fa-address-book"></i>Customer</button>
        <button @onclick="() => AdjustDialogVisibility = true"><i class="far fa-edit" style="margin-left:10px;"></i>Adjust</button>
        <button @onclick="() => RefundDialogVisibility = true"><i class="fas fa-undo-alt"></i>Refund</button>
        <button style="font-size:12px"><i class="fas fa-receipt"></i>Reprint Receipt</button>
        <button style="font-size:12px"><i class="fas fa-sliders-h"></i>Advanced</button>
        <button @onclick="() => ClearCartDialogVisibility = true"><i class="fas fa-trash-alt"></i>Clear Cart</button>
        <button @onclick="() => ClearTransactionDialogVisibility = true"><i class="fas fa-times" style="font-size:36px"></i>Clear All</button>
        <button @onclick="() => { PayDialogVisibility = true; PaymentType = PaymentTypeEnum.Cash; }"><i class="fas fa-dollar-sign"></i>Pay</button>
    </div>



    <!-- Customer Display Widget TODO :: Break into own component -->
    @if (!String.IsNullOrWhiteSpace(SelectedCustomer.FirstName))
    {
        <div class="cashregister-customer-widget">
            <a>Customer Code : @SelectedCustomer.CustomerCode</a>
            <a>Customer : @SelectedCustomer.FirstName @SelectedCustomer.LastName</a>
            <a>Discount : @SelectedCustomer.DiscountPercent%</a>
        </div>
    }


    <!-- Cash Register Controls -->
    <div>
        <div class="row">
            <!-- Qty Form Area  -->
            <div class="col-1">
                <label class="custom-label-squoval">Qty</label>
                <input @bind-value="Quantity" @bind-value:event="oninput" class="form-control" style="border-radius:30px;" />
            </div>

            <!-- UPC input -->
            <div style="width:57%">
                <label class="custom-label-squoval">UPC</label>
                <input @bind-value="UPC"
                       @bind-value:event="oninput"
                       @onkeypress="(KeyboardEventArgs arg) => { if (arg.Key == StaticMembers.EnterKey) { CheckUPC(); } }"
                       class="form-control" style="border-radius:30px;" />
            </div>
        </div>

        <br />

        <!-- Cart Item List -->
        <div class="row" style="margin-left:0px">
            <div style="width:65%">
                <SfGrid @ref="SfGrid" DataSource="CartItems">
                    <GridColumns>
                        <GridColumn Field="Product.Title" HeaderText="Product"></GridColumn>
                        <GridColumn Field="Product.UPC" HeaderText="UPC"></GridColumn>
                        <GridColumn Field="Product.Cost" HeaderText="Price($)" Format="c" TextAlign="TextAlign.Center"></GridColumn>
                        <GridColumn Field="Count" TextAlign="TextAlign.Center" Edit="true"></GridColumn>
                        <GridColumn Width="100px">
                            <Template>
                                @{
                                    var cartItem = (context as CartItem);
                                    if (SelectedCustomer != null && SelectedCustomer.DiscountPercent != 0)
                                    {
                                        <div style="margin-top:20px">
                                            <a>Customer Discount :</a>
                                        </div>
                                    }
                                    if (cartItem.Discounted)
                                    {
                                        <div>
                                            <a>Applied Discount : </a>
                                        </div>
                                    }
                                }
                            </Template>
                        </GridColumn>
                        <GridColumn HeaderText="Item Subtotal" TextAlign="TextAlign.Center">
                            <Template>
                                @{
                                    var cartItem = (context as CartItem);
                                    <div>
                                        <a>@cartItem.ItemSubtotal.ToString("c")</a>
                                    </div>
                                    if (SelectedCustomer != null && SelectedCustomer.DiscountPercent != 0)
                                    {
                                        <div>
                                            <a style="margin-right:10px"> - @cartItem.CustomerDiscountSavings.ToString("c")</a>
                                        </div>
                                    }
                                    if (cartItem.Discounted)
                                    {
                                        <div>
                                            <a style="margin-right:10px">- @cartItem.AdjustDiscountSavings.ToString("c")</a>
                                        </div>
                                    }
                                }
                            </Template>
                        </GridColumn>
                    </GridColumns>
                </SfGrid>
                <style>
                    .e-grid {
                        border-radius: 10px;
                    }

                        .e-grid .e-headercell {
                            background-color: #262b2f;
                        }

                    .e-gridheader {
                        border-radius: 5px;
                    }

                    .e-headercell {
                        color: white;
                    }
                </style>
            </div>


            <!-- Right hand total display -->
            <div class="card" style="margin: 0 0 0 15px;width: 200px;padding: 15px;background-color: #262b2f">
                <div style="margin:10px 0 0 0">
                    <label style="color:white">Subtotal</label>
                    <a class="form-control">@Transaction.SubTotal.ToString("c")</a>
                </div>
                <br />
                <div>
                    <label style="color:white">GST</label>
                    <a class="form-control">@Transaction.Tax.CartGST.ToString("c")</a>
                </div>
                <br />
                <div>
                    <label style="color:white">PST</label>
                    <a class="form-control">@Transaction.Tax.CartPST.ToString("c")</a>
                </div>
                <br />
                <div>
                    <label style="color:white">Total</label>
                    <a class="form-control">@Transaction.Total.ToString("c")</a>
                </div>
                <br />
            </div>
        </div>

    </div>

    <!-- Refund Dialog  TODO:: Come back and finish when payment is done -->
    <SfDialog IsModal="true" @bind-Visible="RefundDialogVisibility" Width="70%">
        <DialogTemplates>
            <Header>Refunds</Header>
            <Content>
                <label>Search for desired transaction below</label>
                <SfGrid Height="500px" TValue="Transaction" DataSource="Transactions" AllowFiltering="true" AllowSelection="true">
                    <GridEvents RowSelected="(RowSelectEventArgs<Transaction> arg) => SelectedTransaction = arg.Data"></GridEvents>
                    <GridColumns>
                        <GridColumn Field="@nameof(Transaction.TransactionNumber)" HeaderText="Transaction Number"></GridColumn>
                        <GridColumn Field="@nameof(Transaction.SubTotal)" HeaderText="Sub Total"></GridColumn>
                        <GridColumn Field="@nameof(Transaction.PurchaseDate)" HeaderText="Purchase Date" Format="dd MMMM yyyy - HH:mm"></GridColumn>
                    </GridColumns>
                </SfGrid>

                @if (!String.IsNullOrWhiteSpace(SelectedTransaction.TransactionNumber))
                {
                    SelectedTransaction.CartItems = _context.CartItems.Where(c => c.TransactionNumber.Equals(SelectedTransaction.TransactionNumber)).ToList();

                    <SfGrid TValue="CartItem" DataSource="SelectedTransaction.CartItems">
                        <GridColumns>
                            <GridColumn Field="@nameof(CartItem.Product.Title)"></GridColumn>
                        </GridColumns>
                    </SfGrid>
                }
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton @onclick="() => RefundDialogVisibility = false" Content="Select" ></DialogButton>
            <DialogButton @onclick="() => RefundDialogVisibility = false" Content="Close"></DialogButton>
        </DialogButtons>
    </SfDialog>

    <!-- Clear Tranaction Dialog -->
    <SfDialog IsModal="true" Width="70%" @bind-Visible="ClearTransactionDialogVisibility">
        <DialogTemplates>
            <Header>Clear Transaction</Header>
            <Content>
                <label>
                    Clearing the transaction will clear all cart items, any adjustments, customer
                    discounts and coupons. Do you wish to continue?
                </label>
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="Confirm" @onclick="() => { ClearTransaction(); ClearTransactionDialogVisibility = false; }"></DialogButton>
            <DialogButton Content="Cancel" @onclick="() => ClearTransactionDialogVisibility = false"></DialogButton>
        </DialogButtons>
    </SfDialog>

    <!-- Pay Dialog -->
    <SfDialog Width="70%" IsModal="true" @bind-Visible="PayDialogVisibility" >
        <DialogTemplates>
            <Header>Select Payment Method</Header>
            <Content>
                <div class="cashregister-toolbar">
                    <button @onclick="() => PaymentType = PaymentTypeEnum.Cash"><i class="fas fa-money-bill-wave"></i>Cash</button>
                    <button @onclick="() => PaymentType = PaymentTypeEnum.Debit"><i class="far fa-credit-card"></i>Debit/Credit</button>
                    <button @onclick="() => PaymentType = PaymentTypeEnum.Cheque"><i class="fas fa-money-check-alt"></i>Cheque</button>
                    <button @onclick="() => PaymentType = PaymentTypeEnum.AR"><i class="fas fa-file-invoice-dollar"></i>A/R</button>
                    <button @onclick="() => PaymentType = PaymentTypeEnum.USCash"><i class="fas fa-flag-usa"></i>US Cash</button>
                    <button @onclick="() => PaymentType = PaymentTypeEnum.Park"><i class="fas fa-parking"></i>Park</button>
                </div>

                <div>
                    <label class="PaymentTypeSelection">Selected Payment Type :</label>
                    <a>@PaymentType</a>
                </div>

                <div class="row">
                    <div class="col-2">
                        <label>Amount Owing</label>
                        <a class="form-control">@Transaction.Total.ToString("c")</a>
                    </div>

                    <div class="col-2">
                        <label>Desired Payment Amount</label>
                        <input type="number" class="form-control" @bind-value=Transaction.AmountPaid @bind-value:event="oninput" />
                    </div>

                    <div class="col-2">
                        <label>Remainder</label>
                        <a class="form-control">@((Transaction.Total - Transaction.AmountPaid).ToString("c"))</a>
                    </div>

                    <!-- Display for payment success/fail based on enum set in payment manager-->
                    @{
                        if (PaymentManager.PaymentStatus == PaymentStatusEnum.Success)
                        {
                            <div class="col-2">
                                <label>Transaction Notification</label>
                                <label class="TransactionNotifSuccess">Success!</label>
                            </div>

                            <div class="col-2">
                                <label>Change</label>
                                <label class="form-control">@Transaction.AmountOwed</label>
                            </div>

                        }
                        else if (PaymentManager.PaymentStatus == PaymentStatusEnum.Failure)
                        {
                            <div class="col-2">
                                <label>Transaction Notification</label>
                                <label class="TransactionNotifFail">Failure! Please try again.</label>
                            </div>
                        }
                    }

                    <!-- Display for amount till owes customer -->

                </div>

                @if (Transaction.Payments.Count() > 0)
                {
                    <div>
                        <SfGrid TValue="Payment" DataSource="Transaction.Payments">
                            <GridColumns>
                                <GridColumn Field="@nameof(Payment.PaymentType)"></GridColumn>
                                <GridColumn Field="@nameof(Payment.PaymentAmount)"></GridColumn>
                            </GridColumns>
                        </SfGrid>
                    </div>
                }

                <br />

                @if (PaymentManager.PaymentRunning)
                {
                    <label>Transaction Timer :</label>
                    <SfProgressBar Value="ProgressValue" Height="30px" ShowProgressValue="true" Maximum="120" Minimum="0"></SfProgressBar>
                }

            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton @onclick="async () => {
                                        if (!PaymentManager.PaymentRunning)
                                        {
                                            PaymentManager.PaymentRunning = true;
                                            Transaction = await PaymentManager.MakePayment(Transaction, PaymentType, CartItems);
                                        }
                                    }"
                          Content="Accept"></DialogButton>
            <DialogButton @onclick="() => { PayDialogVisibility = false; PaymentManager.PaymentRunning = false; }" Content="Cancel"></DialogButton>
        </DialogButtons>
    </SfDialog>

    <!-- Clear Cart Dialog -->
    <SfDialog IsModal="true" @bind-Visible="ClearCartDialogVisibility" Width="70%">
        <DialogTemplates>
            <Header>Clear Cart Items</Header>
            <Content>
                <label>Please confirm if you wish to clear the current cart items</label>
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="Confirm" @onclick="() => { ClearCartDialogVisibility = false; ClearCart(); }"></DialogButton>
            <DialogButton Content="Cancel" @onclick="() => ClearCartDialogVisibility = false"></DialogButton>
        </DialogButtons>
    </SfDialog>

    <!-- Customer Dialog -->
    <SfDialog ID="CustomerDialog" Width="70%" IsModal="true" @bind-Visible="CustomerDialogVisibility">
        <DialogTemplates>
            <Header>Select A Customer</Header>
            <Content>
                <SfGrid TValue="Customer" AllowFiltering="true" AllowSelection="true" DataSource="Customers" Height="200px">
                    <GridSelectionSettings Type="SelectionType.Single"></GridSelectionSettings>
                    <GridEvents RowSelected="(RowSelectEventArgs<Customer> arg) => SelectedCustomer = arg.Data" TValue="Customer"></GridEvents>
                    <GridColumns>
                        <GridColumn Field="@nameof(Customer.Id)" Visible="false"></GridColumn>
                        <GridColumn Field="@nameof(Customer.FirstName)"></GridColumn>
                        <GridColumn Field="@nameof(Customer.LastName)"></GridColumn>
                        <GridColumn Field="@nameof(Customer.CustomerCode)" HeaderText="Customer Code" TextAlign="TextAlign.Center"></GridColumn>
                        <GridColumn HeaderText="Discount %" TextAlign="TextAlign.Center">
                            <Template>
                                @{
                                    var customer = (context as Customer);
                                    <a>@customer.DiscountPercent%</a>
                                }
                            </Template>
                        </GridColumn>
                    </GridColumns>
                </SfGrid>
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="Select" OnClick="() => { CustomerDialogVisibility = false; CalcTotal(); if (SelectedCustomer != null) { Transaction.Customer = SelectedCustomer; } }"></DialogButton>
            <DialogButton Content="Cancel" OnClick="() => { CustomerDialogVisibility = false; SelectedCustomer = new Customer(); }"></DialogButton>
        </DialogButtons>
    </SfDialog>

    <!-- Adjust Dialog -->
    <SfDialog Width="70%" IsModal="true" @bind-Visible="AdjustDialogVisibility">
        <DialogTemplates>
            <Header>Adjust</Header>
            <Content>
                <!-- Entire Cart Edit -->
                <div class="card" style="padding:10px">
                    <label>Cart Subtotal Adjust</label>
                    <div class="row">
                        <div class="col-2">
                            <label>Discount Percent</label>
                            <input class="form-control" type="number" @oninput="(e) => { ApplyCartDiscount((string)e.Value, AdjustTypeEnum.Percent); }" />
                        </div>
                        <div class="col-2">
                            <label>New Subtotal</label>
                            <div>
                                <label class="form-control">@Transaction.DiscountSubtotal.ToString("c")</label>
                            </div>
                        </div>
                        <div class="col-2">
                            <label>Old Subtotal</label>
                            <div>
                                <label class="form-control">@Transaction.SubTotal.ToString("c")</label>
                            </div>
                        </div>
                        <div class="col-2">
                            <label>Amount Saved</label>
                            <div>
                                <label class="form-control">@((Transaction.SubTotal - Transaction.DiscountSubtotal).ToString("c"))</label>
                            </div>
                        </div>

                    </div>
                </div>

                <br />

                <!-- Individual Item Edit -->
                <SfGrid @ref="AdjustDialogCartItemGrid" DataSource="CartItems" TValue="CartItem">
                    <GridTemplates>
                        <RowTemplate>
                            @{
                                var cartItem = (context as CartItem);
                                <td>
                                    <label>@cartItem.Product.Title</label>
                                </td>
                                <td>
                                    <label>@cartItem.Product.Cost.ToString("c")</label>
                                </td>
                                <td>
                                    <input type="number" class="form-control" @oninput="(e) => ApplyIndvItemDiscount(cartItem, e.Value, AdjustTypeEnum.Percent)" />
                                </td>
                                <td>
                                    <input type="number" class="form-control" @oninput="(e) => ApplyIndvItemDiscount(cartItem, e.Value, AdjustTypeEnum.Amount)" />
                                </td>
                                <td>
                                    <label type="number" class="form-control">@cartItem.DiscountSubTotal.ToString("c")</label>
                                </td>
                            }
                        </RowTemplate>
                    </GridTemplates>

                    <GridColumns>
                        <GridColumn HeaderText="Product"></GridColumn>
                        <GridColumn HeaderText="Cost"></GridColumn>
                        <GridColumn HeaderText="Discount %"></GridColumn>
                        <GridColumn HeaderText="Discount Amount"></GridColumn>
                        <GridColumn HeaderText="New Item Cost"></GridColumn>
                    </GridColumns>
                </SfGrid>
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="Close" OnClick="() => { AdjustDialogVisibility = false; CalcTotal(); }"></DialogButton>
        </DialogButtons>
    </SfDialog>

</div>


@code {

    #region Properties

    public ObservableCollection<CartItem> CartItems { get; set; }

    public Transaction Transaction { get; set; }
    public List<Transaction> Transactions { get; set; }
    public Transaction SelectedTransaction { get; set; }
    public bool TransactionInProgress { get; set; }

    #region Visiblity

    public bool AdjustDialogVisibility { get; set; } = false;
    public bool CustomerDialogVisibility { get; set; } = false;
    public bool ClearCartDialogVisibility { get; set; }
    public bool ClearTransactionDialogVisibility { get; set; }
    public bool RefundDialogVisibility { get; set; }
    public bool PayDialogVisibility { get; set; }

    #endregion

    public SfGrid<CartItem> SfGrid { get; set; }
    public SfGrid<CartItem> AdjustDialogCartItemGrid { get; set; }

    public int ProgressValue { get; set; }

    public PaymentManager PaymentManager { get; set; }
    public PaymentTypeEnum PaymentType { get; set; }

    [CascadingParameter]
    public Customer SelectedCustomer { get; set; }
    public List<Customer> Customers { get; set; }

    private int Quantity { get; set; }
    private bool Duplicate { get; set; }

    private string _UPC;

    public string UPC
    {
        get { return _UPC; }
        set
        {
            _UPC = String.Concat(value.Where(c => !Char.IsWhiteSpace(c)));
            if (_UPC.Length >= 12)
                CheckUPC();
        }
    }

    #endregion

    #region Initialize


    protected override async Task OnInitializedAsync()
    {
        // New Instances 
        CartItems = new ObservableCollection<CartItem>();
        Transaction = new Transaction() { Tax = new Tax(), Payments = new List<Payment>() };
        PaymentManager = new PaymentManager(_navManager, _context);
        SelectedCustomer = new Customer();
        SelectedTransaction = new Transaction();

        // Other
        Quantity = 1;

        // Events 
        PaymentManager.CounterIncrement += OnIncrementCounter;
        PaymentManager.PaymentTimeout += OnPaymentTimeout;

        // List init 
        Customers = await _context.Customers.ToListAsync();
        Transactions = await _context.Transactions.Where(t => t.PurchaseDate > DateTime.Now.AddDays(-30)).ToListAsync();
    }


    #endregion

    #region Methods

    /// <summary>
    /// Checks to see if input UPC exists in the system, if so, add to current transaction cart
    /// </summary>
    private void CheckUPC()
    {
        var cartItem = new CartItem();
        cartItem.Product = _context.Products.FirstOrDefault(p => p.UPC == UPC);

        if (cartItem.Product != null)
            AddToCart(cartItem);
        else
            Console.WriteLine($"Could not find item with UPC : {UPC}");
    }

    /// <summary>
    /// Add a cart item to the observable list, update the grid and any values that were changed with the addition
    /// </summary>
    /// <param name="cartItem">Cart item found by CheckUPC</param>

    private void AddToCart(CartItem cartItem)
    {
        cartItem.Count = Quantity;

        if (CartItems.Contains(CartItems.Where(c => c.Product.UPC == cartItem.Product.UPC).FirstOrDefault()))
        {
            var index = CartItems.IndexOf(CartItems.Where(c => c.Product.UPC == cartItem.Product.UPC).FirstOrDefault());
            CartItems[index].Count += cartItem.Count;
            Duplicate = true;
        }

        // If the item that was scanned is already in cart, follow this flow

        // If the scanned item is new, follow this flow
        if (!Duplicate)
        {
            CartItems.Add(cartItem);
            CalcTotal();
        }

        if (Duplicate)
        {
            CalcTotal();
            Duplicate = false;
        }

        // Reset the item scan variables
        Quantity = 1;
        UPC = string.Empty;

        SfGrid.Refresh();
        StateHasChanged();
    }

    // Validates total cart discount percent and then calls CalcCartDiscountAmount to update the view
    private void ApplyCartDiscount(string value, AdjustTypeEnum adjustType)
    {
        // Checking for any alpha characters
        bool containsLetters = value.Any(x => !char.IsLetter(x));

        // If none convert to double and pass to calc whole cart discount
        if (containsLetters)
        {
            var convertValue = Convert.ToDouble(value);

            if (adjustType == AdjustTypeEnum.Percent)
            {
                foreach (var cartItem in CartItems)
                {
                    cartItem.Discounted = true;
                    cartItem.DiscountPercent = convertValue;
                    CalcCartItemDiscount(cartItem);
                }
            }
            else if (adjustType == AdjustTypeEnum.Amount)
            {

            }

            CalcTotal();
        }
        else
        {
            //TODO :: Inform that no alphabetical characters are allowed
            Console.WriteLine("Not allowed character in the discount field");
        }
    }

    // Validates indv cart item percent and calls CalcCartItemDiscount to update view
    private void ApplyIndvItemDiscount(CartItem value, object percent, AdjustTypeEnum adjustType)
    {
        // Checking for any alpha characters
        bool containsLetters = percent.ToString().Any(x => !char.IsLetter(x));

        // If no alpha calc indv item discounted value
        if (containsLetters)
        {
            var discountValue = Convert.ToDouble(percent);

            if (adjustType == AdjustTypeEnum.Percent)
            {
                if (value.DiscountPercent >= 0)
                {
                    value.DiscountPercent = discountValue;
                    value.PercentDiscountedBool = true;
                    value.Discounted = true;
                    CalcCartItemDiscount(value);
                }
            }
            else if (adjustType == AdjustTypeEnum.Amount)
            {
                if (value.DiscountAmount >= 0)
                {
                    value.DiscountAmount = discountValue;
                    value.AmountDiscountedBool = true;
                    value.Discounted = true;
                    CalcCartItemDiscount(value);
                }
            }
        }
        else
        {
            Console.WriteLine("Not allowed character in the discount field");
        }
    }

    // Calc the new subtotal for the entire cart **FULL CART**
    private void CalcCartDiscountSubtotal()
    {
        // Reset the discount subtotal each time
        Transaction.DiscountSubtotal = 0;

        // Accounting for both disc. perc. and amount
        if (Transaction.DiscountPercent != 0 && Transaction.DiscountAmount != 0)
        {
            var tempTotal = Transaction.SubTotal - Transaction.DiscountAmount;
            Transaction.DiscountSubtotal = tempTotal - (tempTotal * (Transaction.DiscountPercent / 100));
        }

        // if only disc. perc is entered
        else if (Transaction.DiscountPercent >= 0)
            if (Transaction.DiscountPercent != 0)
                Transaction.DiscountSubtotal = Transaction.SubTotal - (Transaction.SubTotal * Transaction.DiscountPercent / 100);

            else if (Transaction.DiscountAmount >= 0)
                Transaction.DiscountSubtotal = Transaction.SubTotal - Transaction.DiscountAmount;
    }

    // Calc the new subtotal for the entire cart **INDIVIDUAL ITEMS**
    // Also allows for calc when customer discount is involved
    // TODO :: Implement singular item discounts
    private void CalcCartItemDiscount(CartItem cartItem)
    {
        cartItem.DiscountSubTotal = 0;

        // Only used if there is a customer discount along with adjust discount applied, uses
        // CustomerDiscountTotal from Calc()
        if (cartItem.CustomerDiscountTotal > 0)
        {
            if (cartItem.AmountDiscountedBool && cartItem.PercentDiscountedBool)
            {
                var tempTotal = cartItem.CustomerDiscountTotal - cartItem.DiscountAmount;
                cartItem.DiscountSubTotal = tempTotal - (tempTotal * (cartItem.DiscountPercent / 100));
            }

            else if (cartItem.DiscountPercent > 0)
            {
                cartItem.DiscountSubTotal = cartItem.CustomerDiscountTotal - (cartItem.CustomerDiscountTotal * cartItem.DiscountPercent / 100);
            }

            else if (cartItem.DiscountAmount >= 0)
            {
                cartItem.DiscountSubTotal = cartItem.CustomerDiscountTotal - cartItem.DiscountAmount;
            }

            else if (cartItem.DiscountPercent == 0)
            {
                cartItem.DiscountSubTotal = cartItem.CustomerDiscountTotal;
            }
        }
        else
        {
            if (cartItem.AmountDiscountedBool && cartItem.PercentDiscountedBool)
            {
                var tempTotal = cartItem.Product.Cost - cartItem.DiscountAmount;
                cartItem.DiscountSubTotal = tempTotal - (tempTotal * (cartItem.DiscountPercent / 100));
            }

            else if (cartItem.DiscountPercent > 0)
            {
                cartItem.DiscountSubTotal = cartItem.Product.Cost - (cartItem.Product.Cost * cartItem.DiscountPercent / 100);
            }

            else if (cartItem.DiscountAmount >= 0)
            {
                cartItem.DiscountSubTotal = cartItem.Product.Cost - cartItem.DiscountAmount;
            }

            else if (cartItem.DiscountPercent == 0)
            {
                cartItem.DiscountSubTotal = cartItem.Product.Cost;
            }
        }
    }

    // This will take in whatever bool was set in the Confirmation changed, if true, clear
    // cart, else close dialog
    private void ClearCart()
    {
        CartItems.Clear();
    }

    // Clears all cart items and selected customer
    private void ClearTransaction()
    {
        SelectedCustomer = new Customer();
        CartItems.Clear();
    }

    // Calc the final total with tax included
    private void CalcTax()
    {
        Transaction.Tax.CartGST = Transaction.SubTotal * 0.05;
        Transaction.Tax.CartPST = Transaction.SubTotal * 0.07;
        Transaction.Total = Transaction.SubTotal + Transaction.Tax.CartPST + Transaction.Tax.CartGST;
    }

    // Calc total for the cart
    private void CalcTotal()
    {
        Transaction.SubTotal = 0;
        Transaction.DiscountSubtotal = 0;

        // Going over each item in the cart and adding to total
        foreach (var cartItem in CartItems)
        {
            // Accounting for idv. discounted subtotals
            if (cartItem.Discounted && SelectedCustomer.DiscountPercent > 0)
            {
                cartItem.CustomerDiscountSavings = 0;
                cartItem.AdjustDiscountSavings = 0;

                for (var i = 1; i <= cartItem.Count; i++)
                {
                    cartItem.DiscountSubTotal = 0;
                    cartItem.CustomerDiscountTotal = cartItem.ItemSubtotal - (cartItem.ItemSubtotal * (SelectedCustomer.DiscountPercent / 100));
                    cartItem.CustomerDiscountSavings += cartItem.ItemSubtotal - cartItem.CustomerDiscountTotal;

                    CalcCartItemDiscount(cartItem);
                    cartItem.AdjustDiscountSavings += cartItem.CustomerDiscountTotal - cartItem.DiscountSubTotal;
                    Transaction.SubTotal += cartItem.DiscountSubTotal;
                }

                CalcTax();

            }
            else if (SelectedCustomer.DiscountPercent > 0)
            {
                cartItem.CustomerDiscountSavings = 0;

                for (var i = 1; i <= cartItem.Count; i++)
                {
                    cartItem.CustomerDiscountTotal = cartItem.ItemSubtotal - (cartItem.ItemSubtotal * (SelectedCustomer.DiscountPercent / 100));
                    cartItem.CustomerDiscountSavings += cartItem.ItemSubtotal - cartItem.CustomerDiscountTotal;
                    Transaction.SubTotal += cartItem.CustomerDiscountTotal;
                }

                CalcTax();


            }
            else if (cartItem.Discounted)
            {
                cartItem.AdjustDiscountSavings = 0;

                for (var i = 1; i <= cartItem.Count; i++)
                {
                    Transaction.SubTotal += cartItem.DiscountSubTotal;
                    cartItem.AdjustDiscountSavings += cartItem.ItemSubtotal - cartItem.DiscountSubTotal;
                }

                CalcTax();
            }
            else
            {
                cartItem.ItemSubtotal = cartItem.Product.Cost * cartItem.Count;
                Transaction.SubTotal += cartItem.ItemSubtotal;

                CalcTax();
            }
        }

        Transaction.AmountOwing = Transaction.Total;
        Transaction.AmountPaid = Transaction.Total;
    }

    private void OnIncrementCounter(object sender, System.EventArgs e)
    {
        ProgressValue = (int)sender;
        Console.WriteLine(ProgressValue);
        InvokeAsync(StateHasChanged);
    }

    private void OnPaymentTimeout(object sender, System.EventArgs e)
    {
        Console.WriteLine("Payment Has Timed Out");

    }


    #endregion
}
