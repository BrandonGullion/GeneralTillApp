@page "/product/addproduct"

@inject StateManager _manager 
@inject NavigationManager _navManager 
@inject ApplicationDbContext _context

<h3>Add Product</h3>

<br />

<EditForm Model="Product" OnValidSubmit="Save">
    <DataAnnotationsValidator></DataAnnotationsValidator>

    <!-- Name, UPC and Retail price required to make and item -->
    <div class="row">
        <div class="col-5">
            <div>
                <label class="col-form-label">Name :</label>
                <InputText class="form-control" @bind-Value="Product.Title"></InputText>
                <ValidationMessage For="() => Product.Title"></ValidationMessage>
            </div>
            <div>
                <label class="col-form-label">Description : </label>
                <InputText class="form-control" @bind-Value="Product.Description" ></InputText>
            </div>

            <!-- Unit of measure row -->
            <div class="row">
                <div class="col-3">
                    <label class="col-form-label">Unit Size</label>
                    <InputNumber class="form-control" @bind-Value="Product.UnitSize"></InputNumber>
                </div>

                <div class="col-4">
                    <label class="col-form-label">Unit of Measure</label>
                    <select class="custom-select" @bind="Product.UnitOfMeasureId">
                        @foreach (var unitOfMeasure in unitOfMeasures)
                        {
                            <option value="@unitOfMeasure.Id">@unitOfMeasure.Name</option>
                        }
                    </select>
                </div>

                <div class="col-5">
                    <label></label>

                </div>
            </div>

            <!-- Select for product groups to apply discounts -->
            <div>
                <label class="col-form-label">Product Group</label>
                <select class="custom-select" @bind="Product.ProductGroupId">
                    @foreach(var productGroup in productGroups)
                    {
                        <option value="@productGroup.Id">@productGroup.Name</option>
                    }
                </select>
            </div>

        </div>

        <!-- Right side of the page -->
        <div class="col-5">
            <div>
                <label class="col-form-label">UPC :</label>
                <InputText class="form-control" @bind-Value="Product.UPC"></InputText>
                <ValidationMessage For="() => Product.UPC"></ValidationMessage>
            </div>

            <br />

            <!-- On hand and tax row -->
            <div class="row">
                <div class="col-2">
                    <label class="col-form-label"> On Hand :</label>
                </div>
                <InputNumber class="col-2 form-control" @bind-Value="Product.OnHand"></InputNumber>

                <div class="col-2">
                    <label class="col-form-label">GST :</label>
                    <InputCheckbox @bind-Value="Product.GST"></InputCheckbox>
                </div>
                <div class="col-2">
                    <label class="col-form-label">
                        PST :
                        <InputCheckbox @bind-Value="Product.PST"></InputCheckbox>
                    </label>
                </div>
                <div class="col-3">
                    <label class="col-form-label">
                        Discountable :
                        <InputCheckbox @bind-Value="Product.Discountable"></InputCheckbox>
                    </label>
                </div>
            </div>

            <br/>

            <!-- Shelf min/max div row -->
            <div class="row">
                <label class="col-2 col-form-label">Shelf Min:</label>
                <InputNumber class="form-control col-2" @bind-Value="Product.ShelfMin"></InputNumber>

                <label class="col-2 col-form-label">Shelf Max :</label>
                <InputNumber class="form-control col-2" @bind-Value="Product.ShelfMax"></InputNumber>
            </div>

            <br/>

            <!-- Acq cost and retail cost row -->
            <div class="row">
                <label class="col-form-label col-3">Purchase Cost : </label>
                <InputNumber class="form-control col-2" @bind-Value="Product.AcqCost"></InputNumber>

                <label class="col-form-label col-2">Retail Cost : </label>
                <InputNumber class="form-control col-2" @bind-Value="Product.Cost"></InputNumber> 
            </div>
        </div>
    </div>

    <br />
    <button class="btn btn-primary" type="submit">Submit</button>
</EditForm>

@code {

    public Product Product { get; set; }
    private List<UnitOfMeasure> unitOfMeasures { get; set; }
    private List<ProductGroup> productGroups { get; set; }


    protected override void OnInitialized()
    {
        Product = new Product() { GST = true, PST = true, Discountable = true};
        unitOfMeasures = _context.UnitOfMeasures.ToList();
        productGroups = _context.ProductGroups.ToList();
    }

    // Used to save the information to the DB using the context 
    public void Save()
    {
        // Validate again if the product is ok to save, requiring name, desc. and upc
        if(!String.IsNullOrWhiteSpace(Product.Title) && !String.IsNullOrWhiteSpace(Product.Description) && !String.IsNullOrWhiteSpace(Product.UPC))
        {
            // Set product Group id so that is can be converted later 
            if (Product.ProductGroupId == 0)
                Product.ProductGroupId = productGroups.FirstOrDefault(p => p.Name == "None").Id;

            // Set the unit of measure if none selected 
            if (Product.UnitOfMeasureId == 0)
                Product.UnitOfMeasureId = _context.UnitOfMeasures.FirstOrDefault(u => u.Name == "None").Id;

            // Sets the ProductGroup and UnitOfMeasure class depending on the Id
            Product.ProductGroup = productGroups.FirstOrDefault(p => p.Id == Product.ProductGroupId);
            Product.UnitOfMeasure = unitOfMeasures.FirstOrDefault(u => u.Id == Product.UnitOfMeasureId);

            // Set the creation date 
            Product.DateAdded = DateTime.Now;
            Product.LastEdited = DateTime.Now;

            _context.Products.Add(Product);
            _context.SaveChanges();

            Console.WriteLine($"Successfully added {Product.Title} to the DB");
            _manager.NotificationManager.AddNotification<Product>(Product, NotificationManager.NotificationStatus.Success);

            _navManager.NavigateTo("/product");
        }
        else
        {
            Console.WriteLine("There was an error saving the product to the DB");
        }
    }

}
